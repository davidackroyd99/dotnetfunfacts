{"id": 256674, "facts": [{"id": 106751, "metadata": {"title": "The Device Is Not Ready", "url": "device-not-ready", "contributors": "David Ackroyd", "created": "2020-3-4", "modified": "2020-3-4", "tags": ["Windows", "Common Mistakes"]}, "body": "<p>Sometimes, when attempting to do a file IO operation you might get a weird but persistent Windows API error that just reads &#39;Device Not Ready&#39;. This happens when you try and write to a drive letter that doesn&#39;t exist on the machine. Check your paths carefully!</p>\n"}, {"id": 161153, "metadata": {"title": "SQL String Comparisons Are Not Case Sensitive", "url": "sql-case-sensitivity", "contributors": "David Ackroyd", "created": "2020-03-08", "modified": "2020-03-08", "tags": ["T-SQL", "Common Mistakes"]}, "body": "<p>T-SQL is case insensitive and this means that the WHERE clauses that compare column values to some known string will not be case sensitive either. This means that</p>\n<pre><code>SELECT * FROM [TABLE_NAME] WHERE [COLUMN] = &#39;this is a string&#39;\n</code></pre><p>and</p>\n<pre><code>SELECT * FROM [TABLE_NAME] WHERE [COLUMN] = &#39;THIS IS A STRING&#39;\n</code></pre><p>will return the same result sets.</p>\n"}, {"id": 850439, "metadata": {"title": "Null Confusion", "url": "null-confusion", "contributors": "David Ackroyd", "created": "2020-03-08", "modified": "2020-03-08", "tags": ["C#", "Language Fundamentals"]}, "body": "<p>Null can be confusing, so here is a metaphor that hopefully makes it a bit clearer.</p>\n<p>Imagine that you work in a hotel with lots of difference rooms. You have to distribute a load of parcels that have pieces of paper attached to them. If the piece of paper is blank, that doesn&#39;t mean that the piece of paper doesn&#39;t exist, or that none of the rooms exist, it just means that you can&#39;t deliver the parcel.</p>\n<p>A reference is like a piece of paper, and a parcel is like a message that is sent to an object - the piece of paper <em>can</em> have a room number written on it, but it doesn&#39;t <em>have</em> to, and the parcel needs to arrive somewhere in order to be delivered. The .NET Framework &#39;knows&#39; that it has to throw a NullReferenceException when you try to &#39;use&#39; a &#39;null object&#39;, because the message that you send doesn&#39;t have a destination.</p>\n"}, {"id": 739023, "metadata": {"title": "Expression Body Definition", "url": "expression-body-definition", "contributors": "David Ackroyd", "created": "2020-03-08", "modified": "2020-03-08", "tags": ["C#", "Language Fundamentals"]}, "body": "<p>C# 6 provides a more readable format for single expression methods and readonly properties called an &#39;expression body definition&#39;.</p>\n<pre><code>public class MyClass\n{\n    public int MyNumber =&gt; 5;\n\n    public override string ToString() =&gt; $&quot;My number is {MyNumber}&quot;;\n}\n</code></pre><p>This means that we can fit a single expression method on to one line with lambda-esque syntax.</p>\n<p>C# 7 extends this feature to property getters and setters, and constructors.</p>\n<pre><code>public class MyClass\n{\n    private int myNumber;\n\n    public MyClass(int n) =&gt; MyNumber = n;\n\n    public int MyNumber\n    {\n        get =&gt; myNumber;\n        set =&gt; myNumber = value;\n    }\n\n    public override string ToString() =&gt; $&quot;My number is {MyNumber}&quot;;\n}\n</code></pre>"}, {"id": 665113, "metadata": {"title": "Pattern Matching Switch", "url": "pattern-matching-switch", "contributors": "David Ackroyd", "created": "2020-03-08", "modified": "2020-03-08", "tags": ["C#", "Language Fundamentals"]}, "body": "<p>C# 7 introduced support for pattern matching switch statements. </p>\n<pre><code>switch(obj)\n{\n    case SomeType someObj:\n        return someObj.SomeMethod();\n    case OtherType otherObj:\n        return otherObj.OtherMethod();\n    default:\n        return null;\n}\n</code></pre><p>We can also use the <code>when</code> keyword to make our switch statements even more expressive. For example, this will only return the results of the methods when boolean properties on the objects are true.</p>\n<pre><code>switch(obj)\n{\n    case SomeType someObj when someObj.SomeBoolean:\n        return someObj.SomeMethod();\n    case OtherType otherObj when otherObj.OtherBoolean:\n        return otherObj.OtherMethod();\n    default:\n        return null;\n}\n</code></pre>"}, {"id": 296003, "metadata": {"title": "Constructor Overloading And Chaining", "url": "constructor-chaining", "contributors": "David Ackroyd", "created": "2020-03-08", "modified": "2020-03-08", "tags": ["C#", "Language Fundamentals"]}, "body": "<p>In C# it is not possible to invoke a constructor from inside the method body. If you think about this, it makes sense - once you are inside a method, the constructor must have already been called. However, consider the following constructor signatures:</p>\n<pre><code>public SomeObject();\n\npublic SomeObject(int someValue);\n</code></pre><p>You may find yourself in a situation where you wish to provide some default value, or set the optional value and then call the &#39;standard&#39; parameterless constructor. The syntax is similar to calling base from a constructor, except using the &#39;this&#39; keyword to target the current class.</p>\n<pre><code>public class SomeClass \n{\n    public SomeClass()\n    {\n        Console.WriteLine(&quot;constructor with zero parameters says nothing&quot;);\n    }\n\n    public SomeClass(string someMessage) : this() \n    {\n        Console.WriteLine(&quot;constructor with one parameter says &quot; + someMessage);\n    }\n}\n</code></pre><p>N.B. The next constructor in the chain is invoked immediately after the current constructor until the chain is exhausted. In this way C# is quite opinionated - it doesn&#39;t have to be this way, but it is, in an attempt to prevent programmers from doing unnecessary work in their constructors. By convention, in Object Oriented Programming (this is seen in languages like SmallTalk), any work to be done to initialise an object should be done in an &#39;Init&#39; method like so.</p>\n<pre><code>public class SomeClass \n{\n    public SomeClass(string someMessage)\n    {\n        this.message = someMessage;\n        this.Init();\n    }\n\n    private void Init()\n    {\n        // Do some work.\n    }\n}\n</code></pre>"}, {"id": 323749, "metadata": {"title": "Namespace/Type Aliasing", "url": "namespace-alias", "contributors": "David Ackroyd", "created": "2020-3-4", "modified": "2020-3-4", "tags": ["C#", "Language Fundamentals", "Quick Tips"]}, "body": "<p>You can alias namespaces and types, which is often useful for resolving conflicts. For example:</p>\n<pre><code>using n1 = Assembly1.MyNamespace;   // Namespace alias\nusing n2 = Assembly2.MyNamespace;\n</code></pre><p>It works exactly the same way for types.</p>\n<pre><code>using MyClass1 = Assembly1.MyNamespace.MyClass\nusing MyClass2 = Assembly2.MyNamespace.MyClass\n</code></pre>"}, {"id": 268382, "metadata": {"title": "Easy Date Printing", "url": "easy-date-printing", "contributors": "David Ackroyd", "created": "2020-03-08", "modified": "2020-03-08", "tags": ["DateTime", "C#", "Quick Tips"]}, "body": "<p>You can pass a format into the <code>ToString</code> method of a <code>DateTime</code> object to easily print a date with a specific format. You can specify your own format (e.g. &quot;dd-MM-yyyy&quot;) or you can use one of the default one-character &#39;format specifiers&#39; found <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.datetime.tostring?view=netframework-4.8\">here</a>.</p>\n<p>This will default to the current culture. If you want to change the culture, you can pass in an <code>IFormatProvider</code>. These are easy to initialise; if you would like the days and months to be printed in German, you could pass <code>CultureInfo.CreateSpecificCulture(&quot;de-DE&quot;)</code> as the second parameter.</p>\n"}, {"id": 249525, "metadata": {"title": "Order of Elements In A Project File", "url": "order-of-csproj", "contributors": "David Ackroyd", "created": "2020-03-08", "modified": "2020-03-08", "tags": ["MSBuild", "Project Files"]}, "body": "<p>A project file is actually just an MSBuild script. This is intially confusing because a .csproj seems to contain XML data that describes the project (its name, root namespace, etc.), and crucially it seems as though the order of the &#39;elements&#39; of this xml document shouldn&#39;t matter. It does. MSBuild will execute all of the statements in order, just like any other script.</p>\n<p>A property is a user defined constant that can be referred to later on in the script and must be contained within a <code>PropertyGroup</code>. An item is something that can be included in the script, like a file or a nuget package, and must be contained with an <code>ItemGroup</code>. A task is something that the script actually has to do, like moving files around, and in the script you can specify when this should happen (for instance, before the build or after the build). Tasks go in the <code>Target</code> element. The <code>PropertyGroup</code> element must come first, then the <code>ItemGroup</code> element, and finally the <code>Target</code> element.</p>\n"}, {"id": 276837, "metadata": {"title": "Helpful Error Pages For ASP.NET Web Api Projects", "url": "web-api-error", "contributors": "David Ackroyd", "created": "2020-3-4", "modified": "2020-3-4", "tags": ["ASP.NET", "Quick Tips"]}, "body": "<p>By default, ASP.NET Web Api projects will not reveal exception or call stack details in 500 responses. You can modify this behaviour using the IncludeErrorDetailPolicy of the HttpConfiguration object in your App_Start:</p>\n<p>   config.IncludeErrorDetailPolicy = IncludeErrorDetailPolicy.Always;</p>\n<p>There is also a &#39;LocalOnly&#39; option but I&#39;m personally too scared to use it, so you might want to come up with some way of only including this in development builds.</p>\n"}, {"id": 342, "metadata": {"title": "The Right Way To Store XSLTs For Data Transformation", "url": "embedded-resource-xslt", "contributors": "David Ackroyd", "created": "2020-03-08", "modified": "2020-03-08", "tags": ["XSLT", "Quick Tips"]}, "body": "<p>Still, in 2020, a lot of projects .NET developers undertake involve reading data from xml files that have been FTP&#39;d on to the server, parsing these documents, and then performing some action. The developer rarely has control over the schema of the input XML and to make matters worse it&#39;s often subject to change, so the developer will write an XSLT file which transforms the input into some XML format that can then be serialized.</p>\n<p>Before, I used to read the XSLT from a directory stored in settings, but I was constantly losing the XSLT, or placing it in the wrong folder, or not realising it was there when I came to fix an issue. The XSLT needs to be treated like any other part of the code - under source control and part of the final .dll.</p>\n<p>After including the XSLT in your csproj like any normal C# file, in visual studio you can set the <code>BuildAction</code> property of the XSLT to <code>EmbeddedResource</code>. You can then read the xslt as follows:</p>\n<pre><code>var assembly = Assembly.GetExecutingAssembly();\n\n// Rather than messing around with Namespaces, you can just call GetManifestResouceNames()\n// And filter using this bit of LINQ\nvar resourceName = assembly.GetManifestResourceNames()\n      .Single(str =&gt; str.EndsWith(&quot;ProductTransform.xslt&quot;));\n\nusing (Stream stream = assembly.GetManifestResourceStream(resourceName))\nusing (StreamReader reader = new StreamReader(stream))\n{\n    // Do whatever you want to do\n}\n</code></pre><p>If you build the assembly, it will result in just one .dll that can be deployed normally. Code snippet courtesy of <a href=\"https://stackoverflow.com/a/3314213\">this StackOverflow answer</a>.</p>\n"}, {"id": 192905, "metadata": {"title": "Common Cause of an InvalidOperationException", "url": "invalid-op-exception", "contributors": "David Ackroyd", "created": "2020-03-08", "modified": "2020-03-08", "tags": ["C#", "Exception Handling", "Common Mistakes"]}, "body": "<pre><code>int? a = null;\nConsole.WriteLine(a.Value);\n</code></pre><p>When you attempt to access the value of a  nullable value type that does not have a value you will get an InvalidOperationException (instead of a NullReferenceException), which you might not expect. According to the .NET Framework documentation, &#39;this exception is thrown when a method call is invalid for the object&#39;s current state.&#39; However, the documentation on the exception can be confusing as attempting to access the value of a nullable type does not appear in the quite extensive list of possible causes. </p>\n"}, {"id": 801233, "metadata": {"title": "Importing and Exporting CSV Data From SQLite3", "url": "sqlite3-csv", "contributors": "David Ackroyd", "created": "2020-03-08", "modified": "2020-03-08", "tags": ["SQLite", "CSV", "Quick Tips"]}, "body": "<p>The SQLite3 CLI includes various useful commands, including <code>.import</code> and <code>.export</code> which can import and export .csv files. More information on how to import a .csv can be found <a href=\"https://www.sqlitetutorial.net/sqlite-import-csv/?fbclid=IwAR0az4S2bwcpMGpSgZ1HVTInPu34olB-3y941y4T4aaoHmJyfDpMeSvryVo\">here</a>.</p>\n"}, {"id": 116788, "metadata": {"title": "A New Way To Format Strings", "url": "string-interpolation", "contributors": "David Ackroyd", "created": "2020-03-08", "modified": "2020-03-08", "tags": ["C#", "Language Fundamentals", "Quick Tips"]}, "body": "<p>Formatting strings (ie substituting placeholders for expressions) in C# used to be inflexible and difficult to read because of <code>String.Format</code>. Luckily, in C# 6 and above you can use string interpolation.</p>\n<p>With <code>String.Format</code>:</p>\n<pre><code>String.Format(&quot;Hello, {0}!&quot;, expression);\n</code></pre><p>With string interpolation:</p>\n<pre><code>$&quot;Hello, {expression}!&quot;;\n</code></pre><p>Interpolated string literals are identified by the <code>$</code> token. Verbatim literals (literals that do not interpret escape sequences like <code>\\t</code> for the tab character) can be also be interpolated.</p>\n<pre><code>$@&quot;C:\\Users\\{user.Name}&quot;;\n</code></pre><p><em>N.B. It&#39;s best practice to put the <code>$</code> token before the <code>@</code> token as this is required in C# 6 and 7.</em></p>\n"}, {"id": 48719, "metadata": {"title": "T-SQL IN Statement", "url": "sql-in-statement", "contributors": "David Ackroyd", "created": "2020-03-08", "modified": "2020-03-08", "tags": ["T-SQL", "Quick Tips"]}, "body": "<p>In T-SQL you can use the <code>IN</code> statement in a <code>WHERE</code> clause to filter results by a list or subquery.</p>\n<p>The following query selects all employees with any of the job titles in the list.</p>\n<pre><code>SELECT Name, Salary FROM Employees WHERE Title IN (&#39;Software Engineer&#39;, &#39;Support Technician&#39;, &#39;Project Manager&#39;)\n</code></pre><p>The following query finds all of the employees who work in any of the offices in Plymouth. </p>\n<pre><code>SELECT Name, Salary FROM Employees WHERE OfficeName IN (Select OfficeName FROM Offices WHERE Location = &#39;Plymouth&#39;)\n</code></pre><p>Subqueries with IN may be more readable than using multiple joins and they can help when writing a quick query to get some data but they often have performance issues so if you are building them into an application make sure to optimise them.</p>\n"}, {"id": 31976, "metadata": {"title": "Troubleshooting Log4Net", "url": "troubleshooting-log4net", "contributors": "David Ackroyd", "created": "2020-03-08", "modified": "2020-03-08", "tags": ["Log4Net", "Quick Tips"]}, "body": "<p>You can enable log4net internal debugging by adding this to your config file:</p>\n<pre><code>&lt;appSettings&gt;\n     &lt;add key=&quot;log4net.Internal.Debug&quot; value=&quot;true&quot;/&gt;\n  &lt;/appSettings&gt;\n</code></pre><p>This will write out Log4Net internal messages to the trace debugger. To write these trace debug messages out to a file, add this to the .config file and make sure that the application has permissions on the file.</p>\n<pre><code>  &lt;system.diagnostics&gt;\n   &lt;trace autoflush=&quot;true&quot;&gt;\n       &lt;listeners&gt;\n           &lt;add\n               name=&quot;textWriterTraceListener&quot;\n               type=&quot;System.Diagnostics.TextWriterTraceListener&quot;\n               initializeData=&quot;{FILE_TO_WRITE TO}&quot; /&gt;\n       &lt;/listeners&gt;\n   &lt;/trace&gt;\n&lt;/system.diagnostics&gt;\n</code></pre>"}, {"id": 25469, "metadata": {"title": "The Basics of CORS With IIS", "url": "cors-iis", "contributors": "David Ackroyd", "created": "2020-03-08", "modified": "2020-03-08", "tags": ["IIS", "CORS", "Quick Tips"]}, "body": "<p>The same-origin policy stipulates that a web browser should allow scripts on a web page to access data on a second page, but only if they have the same origin. This prevents someone from writing a piece of JavaScript that downloads the contents of another website that a secure user logs in to (say Facebook) and sends it back to their server. When writing an web-based API, for example, you need to enable CORS to allow scripts served by other origins to access your data.</p>\n<p>CORS (Cross Origin Resource Sharing) defines a set of headers that allow the browser and the server to communicate about which requests are and aren&#39;t allowed. To enable CORS, simply add the following to your web.config:</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;configuration&gt;\n &lt;system.webServer&gt;\n   &lt;httpProtocol&gt;\n     &lt;customHeaders&gt;\n       &lt;add name=&quot;Access-Control-Allow-Origin&quot; value=&quot;*&quot; /&gt;\n     &lt;/customHeaders&gt;\n   &lt;/httpProtocol&gt;\n &lt;/system.webServer&gt;\n&lt;/configuration&gt;\n</code></pre><p>You can also specify a certain domain to be used:</p>\n<pre><code>&lt;add name=&quot;Access-Control-Allow-Origin&quot; value=&quot;http://localhost:1506&quot; /&gt;\n</code></pre>"}, {"id": 337797, "metadata": {"title": " The Difference Between Readonly and Const", "url": "readonly-and-const", "contributors": "David Ackroyd", "created": "2020-03-08", "modified": "2020-03-08", "tags": ["C#", "Language Fundamentals", "Keyword Behaviour"]}, "body": "<p>The difference between the <code>const</code> modifier and the <code>readonly</code> modifier is that a field declared <code>const</code> has to be fully evaluable at compile time, where as a field declared <code>readonly</code> is evaluated at runtime. In addition, a read-only field can be assigned in a constructor or in the initialiser of that field. Constants must be value types but read-only fields can be either value or reference types - declaring a read-only reference field does not make the object that the field refers to immutable, it only makes the reference itself immutable.</p>\n"}, {"id": 162003, "metadata": {"title": "Windows File System Case Sensitivity", "url": "case-sensitivity-files", "contributors": "David Ackroyd", "created": "2020-03-08", "modified": "2020-03-08", "tags": ["Windows"]}, "body": "<p>NTFS, the default Windows file system, is a case sensitive file system - this means that it would treat myfile.txt and MyFile.TXT as two different files. However, the Windows API abstracts NTFS to make it appear as though it is case insensitive. For example, if you had myfile.txt already in a directory, Windows would not allow you to make a file called MyFile.TXT in that directory or move one in there without renaming it or replacing the original.</p>\n<p>This matters to .NET Core developers working on Linux because Windows contributors to a git repository will have all sorts of issues with same name but different case files (you can actually enable a feature in developer mode to deal with this issue <a href=\"https://www.howtogeek.com/354220/how-to-enable-case-sensitive-folders-on-windows-10/\">here</a> if you run into this issue). Most Linux file systems also allow colons to appear in file names, but Windows won&#39;t because colons are used for drive letters - another common gotcha.</p>\n"}, {"id": 176445, "metadata": {"title": "WHERE [column] != NULL Does Not Work", "url": "where-null", "contributors": "David Ackroyd", "created": "2020-03-08", "modified": "2020-03-08", "tags": ["T-SQL", "Common Mistakes"]}, "body": "<p>C# will allow you to test if an object is null or not using the <code>!=</code> operator, but <strong>sql server won&#39;t</strong>.</p>\n<pre><code>SELECT * FROM [table] WHERE [column] != NULL -- returns 0 results\n\nSELECT * FROM [table] WHERE [column] IS NOT NULL -- returns expected results\n</code></pre>"}, {"id": 654140, "metadata": {"title": "Adding A Port Number To A SQL Server Connection String", "url": "sql-port-number", "contributors": "David Ackroyd", "created": "2020-03-08", "modified": "2020-03-08", "tags": ["T-SQL", "Common Mistakes"]}, "body": "<p>When you add a port number to a SQL server connection string, you split the server name and the port number with a comma rather than a colon. For example, if you wanted to connect to sql.mywebsite.com on port 5555, ther &#39;server&#39; part connection string would look something like this:</p>\n<pre><code>Server=tcp:sql.mywebsite.com,5555;\n</code></pre><p>This applies to SQL Server Management Studio as well.</p>\n"}, {"id": 132303, "metadata": {"title": "Checking For Empty Strings With String.IsNullOrWhitespace", "url": "is-null-or-whitespace", "contributors": "David Ackroyd", "created": "2020-03-08", "modified": "2020-03-08", "tags": ["C#", "Quick Tips"]}, "body": "<p>When validating external input, .NET developers often just default to the <code>String.IsNullOrEmpty</code> method, without realising that you can also use <code>String.IsNullOrWhitespace</code>. </p>\n"}, {"id": 74412, "metadata": {"title": "Your Code In Interactive Mode", "url": "open-in-interactive", "contributors": "David Ackroyd", "created": "2020-03-12", "modified": "2020-03-12", "tags": ["Visual Studio", "Tooling", "Quick Tips"]}, "body": "<p>To interact with your code in the Visual Studio&#39;s Interactive REPL, right-click a project and select &#39;Initialize Interactive with Project&#39;. This will build the project (along with any dependencies) and enable you to use Intellisense, initialize your objects and run your code. </p>\n"}]}